# See also https://github.com/hvr/multi-ghc-travis for more information
# NB: don't set `language: haskell` here
language: c

cache:
  directories:
    - $HOME/build/diku-kmc/regexps-syntax/.cabal-sandbox
  apt: true
  

notifications:
  email: false

# The following lines enable several GHC versions and/or HP versions
# to be tested; often it's enough to test only against the last
# release of a major GHC version. Setting HPVER implictly sets
# GHCVER. Omit lines with versions you don't need/want testing for.
env:
  - CABALVER=1.22 GHCVER=7.8.4

# Note: the distinction between `before_install` and `install` is not
#       important.
before_install:
  - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
  - travis_retry sudo apt-get update
  - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
  - cabal sandbox init

install:
  - cabal --version
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - travis_retry cabal update
  - cabal install --only-dependencies

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
  # -v2 provides useful information for debugging
  - cabal configure --enable-tests --enable-benchmarks -v2

  # this builds all libraries and executables
  # (including tests/benchmarks)
  - cabal build
 
  - cabal test
  #- cabal check

  # tests that a source-distribution can be generated
  - cabal sdist

  # check that the generated source-distribution can be built & installed
  - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
    (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

  